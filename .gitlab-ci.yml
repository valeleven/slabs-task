image:
  name: hashicorp/terraform:light
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

# Default output file for Terraform plan
variables:
  PLAN: plan.tfplan
  JSON_PLAN_FILE: tfplan.json
  TF_IN_AUTOMATION: "true"
  TF_ROOT: ${CI_PROJECT_DIR}/
  GITLAB_TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_PROJECT_NAME}
  ARM_CLIENT_ID: ${ARM_CLIENT_ID}
  ARM_CLIENT_SECRET: ${ARM_CLIENT_SECRET}
  ARM_TENANT_ID: ${ARM_TENANT_ID}
  ARM_SUBSCRIPTION_ID: ${ARM_SUBSCRIPTION_ID}
cache:
  key: "$CI_COMMIT_SHA"
  paths:
    - ${TF_ROOT}/.terraform

before_script:
  - apk add --no-cache python3 py3-pip
  - apk add --no-cache gcc musl-dev python3-dev libffi-dev openssl-dev cargo make
  - pip install azure-cli
  - apk add --update curl jq
  - alias convert_report="jq -r '([.resource_changes[].change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
  - terraform --version
  - terraform init -backend-config="address=${GITLAB_TF_ADDRESS}" -backend-config="lock_address=${GITLAB_TF_ADDRESS}/lock" -backend-config="unlock_address=${GITLAB_TF_ADDRESS}/lock" -backend-config="username=gitlab-ci-token" -backend-config="password=${CI_JOB_TOKEN}" -backend-config="lock_method=POST" -backend-config="unlock_method=DELETE" -backend-config="retry_wait_min=5"
  - cd ${TF_ROOT}
  - az login --service-principal --username ${ARM_CLIENT_ID} --${ARM_CLIENT_SECRET} --tenant ${ARM_SUBSCRIPTION_ID}

stages:
  - validate
  - plan
  - apply
  - destroy
  - build
  - deploy

validate:
  stage: validate
  script:
    - terraform validate

merge review:
  stage: plan
  script:
    - terraform plan -out=$PLAN
    - "terraform show --json $PLAN | convert_report > $JSON_PLAN_FILE"
  artifacts:
    name: plan
    reports:
        terraform: $JSON_PLAN_FILE
  only:
    - merge_requests

plan production:
  stage: plan
  script:
    - terraform plan

apply:
  stage: apply
  script:
    - terraform apply -auto-approve
  dependencies:
    - plan production
  
destroy:
    stage: destroy
    when: manual
    script:
        - terraform destroy --auto-approve

build:
    stage: build
    image: mcr.microsoft.com/dotnet/sdk:7.0
    before_script:
        - apt-get update && apt-get -y install zip
        - dotnet restore
        - mkdir -p ./tmp/published
        - mkdir -p $CI_PROJECT_DIR/artifact/

    script:
        - dotnet publish -c Release --no-restore -o ./tmp/published
        - cd ./tmp/published && zip -r -q $CI_PROJECT_DIR/artifact/app.zip * .* -x "../*"
        - ls -a $CI_PROJECT_DIR
    dependencies:
        - apply
    artifacts:
        expire_in: 10 minutes
        paths:
         - artifact
deploy:
    image: mcr.microsoft.com/azure-cli
    stage: deploy
    variables:
        GIT_STRATEGY: none
    script:
        - cd $CI_PROJECT_DIR/artifact/ && ls -a
        - az login --service-principal --username ${ARM_CLIENT_ID} --password ${ARM_CLIENT_SECRET} --tenant ${ARM_SUBSCRIPTION_ID}
        - az webapp deploy --resource-group "$rg" --name "mywebapp-rifft01" --src-path "app.zip" --type zip
    dependencies:
        - build

